import csv
import os

dupIndex = 8, 318, 13, 290, 15, 314, 16, 315, 20, 310, 21, 308, 22, 326, 23, 288, 24, 333, 32, 328, 33, 323, 35, 331, \
           37, 302, 38, 311, 305, 366, 317, 362

dupIndexPair = (8, 318), (13, 290), (15, 314), (16, 315), (20, 310), (21, 308), (22, 326), (23, 288), (24, 333), \
               (32, 328), (33, 323), (35, 331), (37, 302), (38, 311), (305, 366), (317, 362)

cat = ['L', 'F', 'K', 'Hy', 'D', 'Hs', 'Pd', 'Mf-m', 'Mf-f', 'Pa', 'Pt', 'Sc', 'Ma', 'Si']


def clear():
    if os.name == 'nt':
        os.system('cls')
    elif os.name == 'posix':
        os.system('clear')
    else:
        pass


# 根据系统选择清空屏幕方法

def oriMarks(answers):
    indexes = {'L': ((),
                     (15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 195, 225, 255, 285)),

               'F': (
                   (14, 27, 31, 34, 35, 40, 42, 48, 49, 50, 53, 56, 66, 85, 121, 123, 139, 146, 151, 156, 168, 184, 197,
                    200, 202, 205, 206, 209, 210, 211, 215, 218, 227, 245, 246, 247, 252, 256, 269, 275, 286, 288, 291,
                    293),
                   (17, 20, 54, 65, 75, 83, 112, 113, 115, 164, 169, 177, 185, 196, 199, 220, 257, 258, 272, 276)),

               'K': (96,
                     (30, 39, 71, 89, 124, 129, 134, 138, 142, 148, 160, 170, 171, 180, 183, 217, 234, 267, 272, 296,
                      316, 322, 368, 370, 372, 373, 375, 386, 394)),

               'Hy': ((10, 23, 32, 43, 44, 47, 76, 114, 179, 186, 189, 238, 253),
                      (2, 3, 6, 7, 8, 9, 12, 26, 30, 51, 55, 71, 89, 93, 103, 107, 109, 124, 128, 129, 136, 137, 141,
                       147, 153, 160, 162, 163, 170, 172, 174, 175, 180, 188, 190, 192, 201, 213, 230, 234, 243, 265,
                       267, 274, 279, 289, 292)),

               'D': ((5, 32, 41, 43, 52, 67, 86, 104, 130, 138, 142, 158, 159, 182, 189, 193, 236, 259, 288, 290),
                     (2, 8, 9, 18, 30, 36, 39, 46, 51, 57, 58, 64, 80, 88, 89, 95, 98, 107, 122, 131, 145, 152, 153,
                      154, 155, 160, 178, 191, 207, 208, 233, 241, 242, 248, 263, 270, 271, 272, 285, 296)),

               'Hs': ((23, 29, 43, 62, 72, 108, 114, 125, 161, 189, 273),
                      (2, 3, 7, 9, 18, 51, 55, 63, 68, 103, 130, 153, 155, 163, 175, 188, 190, 192, 230, 243, 274,
                       281)),

               'Pd': ((16, 21, 24, 32, 33, 35, 38, 42, 61, 67, 84, 94, 102, 106, 110, 118, 127, 215, 216, 224, 239, 244,
                       245, 284),
                      (8, 20, 37, 82, 91, 96, 107, 134, 137, 141, 155, 170, 171, 173, 180, 183, 201, 231, 235, 237, 248,
                       267, 286, 289, 294, 296)),

               'Mf-m': ((4, 25, 69, 70, 74, 77, 78, 87, 92, 126, 132, 134, 140, 149, 179, 187, 203, 204, 217, 226, 231,
                         239, 261, 278, 282, 295, 297, 299),
                        (1, 19, 26, 28, 79, 80, 81, 89, 99, 112, 115, 116, 117, 120, 133, 144, 176, 198, 213, 214, 219,
                         221, 223, 229, 249, 254, 260, 262, 264, 280, 283, 300)),

               'Mf-f': ((4, 25, 70, 74, 77, 78, 87, 92, 126, 132, 133, 134, 140, 149, 187, 203, 204, 217, 226, 239, 261,
                         278, 282, 295, 299),
                        (1, 19, 26, 28, 69, 79, 80, 81, 89, 99, 112, 115, 116, 117, 120, 144, 176, 179, 198, 213, 214,
                         219, 221, 223, 229, 231, 249, 254, 260, 262, 264, 280, 283, 297, 300)),

               'Pa': ((16, 24, 27, 35, 110, 121, 123, 127, 151, 157, 158, 202, 275, 284, 291, 293, 299, 305, 314, 317,
                       326, 338, 341, 364, 365),
                      (93, 107, 109, 111, 117, 124, 268, 281, 294, 313, 316, 319, 327, 347, 348,)),

               'Pt': ((10, 15, 22, 32, 41, 67, 76, 86, 94, 102, 106, 142, 159, 182, 189, 217, 238, 266, 301, 304, 321,
                       336, 337, 340, 342, 343, 344, 346, 349, 351, 352, 356, 357, 358, 359, 360, 361, 362, 366),
                      (3, 8, 36, 122, 152, 164, 178, 329, 353)),

               'Sc': ((15, 22, 40, 41, 47, 52, 76, 97, 104, 121, 156, 157, 159, 168, 179, 182, 194, 202, 210, 212, 238,
                       241, 251, 259, 266, 273, 282, 291, 297, 301, 303, 307, 308, 311, 312, 315, 320, 323, 324, 325,
                       328, 331, 332, 333, 334, 335, 339, 341, 345, 349, 350, 352, 354, 355, 356, 360, 363, 364, 366),
                      (17, 65, 103, 119, 177, 178, 187, 192, 196, 220, 276, 281, 302, 306, 309, 310, 318, 322, 330)),

               'Ma': ((11, 13, 21, 22, 59, 64, 73, 97, 100, 109, 127, 134, 143, 156, 157, 167, 181, 194, 212, 222, 226,
                       228, 232, 233, 238, 240, 250, 251, 263, 266, 268, 271, 277, 279, 298),
                      (101, 105, 111, 119, 120, 148, 166, 171, 180, 267, 289)),

               'Si': ((32, 67, 82, 111, 117, 124, 138, 147, 171, 172, 180, 201, 236, 267, 278, 292, 304, 316, 321, 332,
                       336, 342, 357, 369, 370, 373, 376, 378, 379, 385, 389, 393, 398, 399),
                      (25, 33, 57, 91, 99, 119, 126, 143, 193, 208, 229, 231, 254, 262, 281, 296, 309, 353, 359, 367,
                       371, 374, 377, 380, 381, 382, 383, 384, 387, 388, 390, 391, 392, 395, 396, 397))
               }
    Marks = {}
    for i in cat:
        T = 0
        F = 0
        if i == 'L':
            pass
        elif i == 'K':
            if answers[96][0] == 1:
                T += 1
        else:
            for index in indexes[i][0]:
                if answers[index][2] == 1:
                    T += 1
        for index in indexes[i][1]:
            if answers[index][2] == 2:
                F += 1
        Marks[i] = (T, F, T + F)
    return Marks


def main():
    choice = ''
    while choice != '1' and choice != '2':
        clear()
        choice = input("选择模式：1、进行测试；2、计算得分；3、退出脚本\n")
        if choice != '1' and choice != '2' and choice != '3':
            a = input("无效选项！重新选择。")
            clear()
        elif choice == '1':
            saveChoices()
            a = input("本项功能执行完毕，回到主选单")
        elif choice == '2':
            analyzeChoices()
            a = input("本项功能执行完毕，回到主选单")
        elif choice == '3':
            clear()
            break
        choice = ''


def saveChoices():
    clear()
    with open("MMPI.txt", "r", encoding='UTF-8') as f:
        original = f.readlines()
    if len(original) != 566:
        print("本脚本仅支持566题版本，请检查MMPI.txt!")
        exit()
    Questions = []
    for question in original:
        Questions.append(question.strip())
    Answers = []
    index = 1
    for question in Questions:
        answer = [index]
        index += 1
        print(question)
        choice = input("1．是 2．否 0．无法回答\n")
        while choice != '1' and choice != '2' and choice != '0':
            a = input("无效输入!请重新选择。")
            clear()
            print(question)
            choice = input("1．是 2．否 0．无法回答\n")
        for i in range(10):
            question = question.replace(str(i), '')
        question = question.replace('．', '')
        answer.append(question)
        answer.append(choice)
        Answers.append(answer)
        clear()
    headers = ['index', 'question', 'answer']
    with open('result.csv', 'w', encoding='UTF-8')as f:
        f_csv = csv.writer(f)
        f_csv.writerow(headers)
        f_csv.writerows(Answers)


def analyzeChoices():
    Answers = []
    douMark = 0
    with open('result.csv', 'r', encoding='UTF-8')as f:
        f_csv = csv.reader(f)
        for row in f_csv:
            if row[0] != 'index':
                row[0] = int(row[0])
                row[2] = int(row[2])
            Answers.append(row)
    for answer in Answers:
        if answer[0] not in dupIndex and answer[2] == 0:
            douMark += 1
    for indexPair in dupIndexPair:
        if Answers[indexPair[0]][2] != Answers[indexPair[1]][2]:
            Answers[indexPair[0]][2] = 0
            Answers[indexPair[1]][2] = 0
            douMark += 1
        elif Answers[indexPair[0]][2] == 0:
            douMark += 1
    clear()
    originalMarks = oriMarks(Answers)
    kMark = originalMarks['K'][2]
    HsMark = originalMarks['Hs'][2] + 0.5 * kMark
    PdMark = originalMarks['Pd'][2] + 0.4 * kMark
    PtMark = originalMarks['Pt'][2] + 1.0 * kMark
    ScMark = originalMarks['Sc'][2] + 1.0 * kMark
    MaMark = originalMarks['Ma'][2] + 0.2 * kMark
    temp = ('Hs', 'Pd', 'Pt', 'Sc', 'Ma')
    tempDict = {'Hs': HsMark, 'Pd': PdMark, 'Pt': PtMark, 'Sc': ScMark, 'Ma': MaMark}
    adjMarks = {'?': douMark}
    for i in cat:
        if i not in temp:
            adjMarks[i] = originalMarks[i][2]
        else:
            adjMarks[i] = tempDict[i]
    vMapping = {
        '?': ((0, 41), (10, 44), (20, 47), (30, 50), (40, 53), (50, 56), (60, 58), (70, 61), (80, 64), (90, 66),
              (100, 69), (110, 72), (120, 76), (130, 80)),
        'L': ((0, 36), (1, 40), (2, 44), (3, 46), (4, 50), (5, 53), (6, 56), (7, 60), (8, 63), (9, 66), (10, 70),
              (11, 73), (12, 76), (13, 80), (14, 83), (15, 86)),
        'F': ((0, 44), (1, 46), (2, 48), (3, 50), (4, 53), (5, 55), (6, 58), (7, 60), (8, 62), (9, 64), (10, 66),
              (11, 68), (12, 70), (13, 73), (14, 76), (15, 78), (16, 80), (17, 82), (18, 84), (19, 86), (20, 88),
              (21, 90), (22, 92), (23, 94), (24, 96), (25, 98), (26, 100), (27, 102), (28, 104), (29, 106), (30, 108),
              (31, 110)),
        'K': ((0, 27), (1, 29), (2, 31), (3, 33), (4, 35), (5, 36), (6, 38), (7, 40), (8, 42), (9, 44), (10, 46),
              (11, 48), (12, 49), (13, 51), (14, 53), (15, 55), (16, 57), (17, 59), (18, 61), (19, 62), (20, 64),
              (21, 66), (22, 68), (23, 70), (24, 72), (25, 74), (26, 75), (27, 77), (28, 79), (29, 81), (30, 83))
    }
    uMapping = {
        'Pd': ((6, 20), (7, 22), (8, 24), (9, 27), (10, 29), (11, 32), (12, 34), (13, 36), (14, 39), (15, 41), (16, 43),
               (17, 46), (18, 48), (19, 50), (20, 53), (21, 55), (22, 57), (23, 60), (24, 62), (25, 64), (26, 67),
               (27, 69), (28, 71), (29, 74), (30, 76), (31, 79), (32, 81), (33, 83), (34, 86), (35, 88), (36, 90),
               (37, 93), (38, 95), (39, 97), (40, 100), (41, 102), (42, 104), (43, 107), (44, 109), (45, 111),
               (46, 114), (47, 116), (48, 119)),
        'Pa': ((0, 27), (1, 30), (2, 33), (3, 35), (4, 38), (5, 41), (6, 44), (7, 47), (8, 50), (9, 53), (10, 56),
               (11, 59), (12, 62), (13, 65), (14, 67), (15, 70), (16, 73), (17, 76), (18, 79), (19, 82), (20, 85),
               (21, 88), (22, 91), (23, 94), (24, 97), (25, 100), (26, 102), (27, 105), (28, 108), (29, 111), (30, 114),
               (31, 117), (32, 120)),
        'Ma': ((5, 21), (6, 23), (7, 26), (8, 28), (9, 30), (10, 33), (11, 35), (12, 38), (13, 40), (14, 43), (15, 45),
               (16, 48), (17, 50), (18, 53), (19, 55), (20, 58), (21, 60), (22, 63), (23, 65), (24, 68), (25, 70),
               (26, 73), (27, 75), (28, 78), (29, 81), (30, 83), (31, 86), (32, 88), (33, 91), (34, 93), (35, 96),
               (36, 98), (37, 101), (38, 103), (39, 106), (40, 108)),
        'Si': ((1, 25), (2, 26), (3, 27), (5, 28), (4, 29), (6, 30), (7, 32), (8, 33), (9, 34), (10, 35), (11, 36),
               (12, 37), (13, 38), (14, 39), (15, 40), (16, 41), (17, 42), (18, 43), (19, 44), (20, 45), (21, 46),
               (22, 47), (23, 48), (24, 49), (25, 50), (26, 51), (27, 52), (28, 53), (29, 54), (30, 55), (31, 56),
               (32, 58), (33, 60), (34, 61), (35, 62), (36, 63), (37, 64), (38, 65), (39, 66), (40, 67), (41, 68),
               (42, 69), (43, 70), (44, 71), (45, 72), (46, 73), (47, 74), (48, 75), (49, 76), (50, 77), (51, 78),
               (52, 79), (53, 80), (54, 81), (55, 82), (56, 83), (57, 84), (58, 85), (59, 86), (60, 87), (61, 88),
               (62, 89), (63, 90), (64, 91), (65, 92), (66, 93), (67, 94), (68, 95), (69, 96), (70, 97))
    }
    mMapping = {
        'Hs': ((0, 21), (1, 23), (2, 26), (3, 29), (4, 31), (5, 34), (6, 36), (7, 39), (8, 41), (9, 44), (10, 47),
               (11, 49), (12, 52), (13, 54), (14, 57), (15, 59), (16, 62), (17, 65), (18, 67), (19, 70), (20, 72),
               (21, 75), (22, 77), (23, 80), (24, 82), (25, 85), (26, 88), (27, 90), (28, 93), (29, 95), (30, 98),
               (31, 100), (32, 103), (33, 106), (34, 108), (35, 111), (36, 113), (37, 116), (38, 118)),
        'D': ((8, 29), (9, 32), (10, 34), (11, 36), (12, 39), (13, 41), (14, 44), (15, 46), (16, 48), (17, 51),
              (18, 53), (19, 56), (20, 58), (21, 60), (22, 63), (23, 65), (24, 68), (25, 70), (26, 72), (27, 75),
              (28, 77), (29, 80), (30, 82), (31, 84), (32, 87), (33, 89), (34, 92), (35, 94), (36, 96), (37, 99),
              (38, 101), (39, 104), (40, 106), (41, 108), (42, 111), (43, 113), (44, 116), (45, 118), (46, 120)),
        'Hy': ((8, 35), (9, 36), (10, 38), (11, 40), (12, 42), (13, 44), (14, 45), (15, 47), (16, 49), (17, 51),
               (18, 53), (19, 55), (20, 56), (21, 58), (22, 60), (23, 62), (24, 64), (25, 65), (26, 67), (27, 69),
               (28, 71), (29, 73), (30, 75), (31, 76), (32, 78), (33, 80), (34, 82), (35, 84), (36, 86), (37, 87),
               (38, 89), (39, 91), (40, 93), (41, 95), (42, 96), (43, 98), (44, 100), (45, 102), (46, 104), (47, 106),
               (48, 107), (49, 109), (50, 111), (51, 113), (52, 115), (53, 116), (54, 118)),
        'Mf-m': ((8, 26), (9, 28), (10, 30), (11, 32), (12, 34), (13, 35), (14, 37), (15, 39), (16, 41), (17, 43),
                 (18, 45), (19, 47), (20, 49), (21, 51), (22, 53), (23, 55), (24, 57), (25, 59), (26, 61), (27, 63),
                 (28, 65), (29, 67), (30, 69), (31, 71), (32, 73), (33, 74), (34, 76), (35, 78), (36, 80), (37, 82),
                 (38, 84), (39, 86), (40, 88), (41, 90), (42, 92), (43, 94), (44, 96), (45, 98), (46, 100), (47, 102),
                 (48, 104), (49, 106), (50, 108), (51, 110)),
        'Pt': ((9, 21), (10, 23), (11, 26), (12, 28), (13, 30), (14, 32), (15, 34), (16, 36), (17, 38), (18, 40),
               (19, 42), (20, 44), (21, 46), (22, 48), (23, 50), (24, 52), (25, 54), (26, 56), (27, 58), (28, 60),
               (29, 62), (30, 64), (31, 66), (32, 69), (33, 71), (34, 73), (35, 75), (36, 77), (37, 79), (38, 81),
               (39, 83), (40, 85), (41, 87), (42, 89), (43, 91), (44, 93), (45, 95), (46, 97), (47, 99), (48, 101),
               (49, 103), (50, 105), (51, 107), (52, 110), (53, 112), (54, 114), (55, 116), (56, 118), (57, 120)),
        'Sc': ((7, 21), (8, 23), (9, 25), (10, 26), (11, 28), (12, 30), (13, 32), (14, 34), (15, 36), (16, 38),
               (17, 40), (18, 42), (19, 44), (20, 46), (21, 48), (22, 50), (23, 51), (24, 53), (25, 55), (26, 57),
               (27, 59), (28, 61), (29, 63), (30, 65), (31, 67), (32, 69), (33, 71), (34, 73), (35, 74), (36, 76),
               (37, 78), (38, 80), (39, 82), (40, 84), (41, 86), (42, 88), (43, 90), (44, 92), (45, 94), (46, 96),
               (47, 97), (48, 99), (49, 101), (50, 103), (51, 105), (52, 107), (53, 109), (54, 111), (55, 113),
               (56, 115), (57, 117), (58, 119))
    }
    fMapping = {
        'Hs': ((0, 23), (1, 25), (2, 27), (3, 29), (4, 31), (5, 33), (6, 35), (7, 37), (8, 39), (9, 42), (10, 44),
               (11, 46), (12, 48), (13, 50), (14, 52), (15, 54), (16, 56), (17, 58), (18, 60), (19, 62), (20, 64),
               (21, 66), (22, 68), (23, 70), (24, 72), (25, 74), (26, 76), (27, 78), (28, 80), (29, 82), (30, 85),
               (31, 87), (32, 89), (33, 91), (34, 93), (35, 95), (36, 97), (37, 99), (38, 101), (39, 103), (40, 105),
               (41, 107), (42, 109), (43, 111)),
        'D': ((8, 28), (9, 30), (10, 32), (11, 34), (12, 36), (13, 38), (14, 40), (15, 42), (16, 44), (17, 46),
              (18, 47), (19, 49), (20, 51), (21, 53), (22, 55), (23, 57), (24, 59), (25, 62), (26, 63), (27, 65),
              (28, 67), (29, 69), (30, 71), (31, 73), (32, 75), (33, 76), (34, 78), (35, 80), (36, 82), (37, 84),
              (38, 86), (39, 88), (40, 90), (41, 92), (42, 94), (43, 96), (44, 98), (45, 100), (46, 102), (47, 103),
              (48, 105), (49, 107), (50, 109), (51, 111), (52, 113), (53, 115), (54, 117)),
        'Hy': ((4, 24), (5, 26), (6, 27), (7, 29), (8, 31), (9, 33), (10, 34), (11, 36), (12, 38), (13, 40), (14, 42),
               (15, 43), (16, 45), (17, 47), (18, 49), (19, 50), (20, 52), (21, 54), (22, 56), (23, 57), (24, 59),
               (25, 61), (26, 63), (27, 64), (28, 66), (29, 68), (30, 70), (31, 72), (32, 73), (33, 75), (34, 77),
               (35, 79), (36, 80), (37, 82), (38, 84), (39, 86), (40, 87), (41, 89), (42, 91), (43, 93), (44, 94),
               (45, 96), (46, 98), (47, 100), (48, 101), (49, 103), (50, 105), (51, 107), (52, 109), (53, 110),
               (54, 112)),
        'Mf-f': ((15, 95), (16, 92), (17, 90), (18, 88), (19, 86), (20, 84), (21, 82), (22, 80), (23, 78), (24, 76),
                 (25, 74), (26, 72), (27, 70), (28, 68), (29, 66), (30, 63), (31, 61), (32, 59), (33, 57), (34, 55),
                 (35, 53), (36, 51), (37, 49), (38, 47), (39, 45), (40, 43), (41, 41), (42, 39), (43, 37), (44, 34),
                 (45, 32), (46, 30), (47, 28), (48, 26), (49, 24), (50, 22), (51, 20)),
        'Pt': ((7, 20), (8, 22), (9, 23), (10, 25), (11, 27), (12, 28), (13, 30), (14, 32), (15, 33), (16, 35),
               (17, 36), (18, 38), (19, 40), (20, 41), (21, 43), (22, 45), (23, 46), (24, 48), (25, 50), (26, 51),
               (27, 53), (28, 55), (29, 56), (30, 58), (31, 60), (32, 61), (33, 63), (34, 65), (35, 66), (36, 68),
               (37, 69), (38, 71), (39, 73), (40, 74), (41, 76), (42, 78), (43, 79), (44, 81), (45, 83), (46, 84),
               (47, 86), (48, 88), (49, 89), (50, 91), (51, 93), (52, 94), (53, 96), (54, 98), (55, 99), (56, 101),
               (57, 102), (58, 104), (59, 106), (60, 107)),
        'Sc': ((5, 23), (6, 24), (7, 26), (8, 27), (9, 29), (10, 31), (11, 32), (12, 34), (13, 35), (14, 37), (15, 38),
               (16, 40), (17, 41), (18, 43), (19, 44), (20, 46), (21, 47), (22, 49), (23, 51), (24, 52), (25, 54),
               (26, 55), (27, 57), (28, 58), (29, 60), (30, 61), (31, 63), (32, 64), (33, 66), (34, 67), (35, 69),
               (36, 71), (37, 72), (38, 74), (39, 75), (40, 77), (41, 78), (42, 80), (43, 81), (44, 83), (45, 84),
               (46, 86), (47, 87), (48, 89), (49, 91), (50, 92), (51, 94), (52, 95), (53, 97), (54, 98), (55, 100),
               (56, 101), (57, 103), (58, 104), (59, 106), (60, 107), (61, 109), (62, 111), (63, 112), (64, 114),
               (65, 115), (66, 117), (67, 118))
    }
    vMappingIndex = ('?', 'L', 'F', 'K')
    uMappingIndex = ('Pd', 'Pa', 'Ma', 'Si')
    mMappingIndex = ('Hs', 'D', 'Hy', 'Mf-m', 'Pt', 'Sc')
    fMappingIndex = ('Hs', 'D', 'Hy', 'Mf-f', 'Pt', 'Sc')
    scale = {'L': "说谎分数", 'F': "诈病分数", 'K': "矫正分数", 'Hs': "疑病", 'D': "抑郁", 'Hy': "癔病", 'Pd': "精神病态",
             'Mf-m': "男子气", 'Mf-f': "女子气", 'Pa': "妄想狂", 'Pt': "精神衰弱", 'Sc': "精神分裂症", 'Ma': "轻躁狂",
             'Si': "社会内向", '?': "回答不可靠性"}
    tMarks_V = {}
    tMarks_U = {}
    tMarks_M = {}
    tMarks_F = {}
    for vIndex in vMappingIndex:
        tMark = 0
        for tMapping in vMapping[vIndex]:
            if adjMarks[vIndex] >= tMapping[0]:
                tMark = tMapping[1]
            else:
                break
        tMarks_V[vIndex + '（' + scale[vIndex] + '）'] = tMark
    for uIndex in uMappingIndex:
        tMark = 0
        for tMapping in uMapping[uIndex]:
            if adjMarks[uIndex] >= tMapping[0]:
                tMark = tMapping[1]
            else:
                break
        tMarks_U[uIndex + '（' + scale[uIndex] + '）'] = tMark
    for mIndex in mMappingIndex:
        tMark = 0
        for tMapping in mMapping[mIndex]:
            if adjMarks[mIndex] >= tMapping[0]:
                tMark = tMapping[1]
            else:
                break
        tMarks_M[mIndex + '（' + scale[mIndex] + '）'] = tMark
    for fIndex in fMappingIndex:
        tMark = 0
        for tMapping in fMapping[fIndex]:
            if adjMarks[fIndex] >= tMapping[0]:
                tMark = tMapping[1]
            else:
                break
        tMarks_F[fIndex + '（' + scale[fIndex] + '）'] = tMark
    print("校度T分")
    print(tMarks_V)
    print("通用T分")
    print(tMarks_U)
    print("男性T分")
    print(tMarks_M)
    print("女性T分")
    print(tMarks_F)


main()
